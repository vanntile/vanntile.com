---
import { getImage } from 'astro:assets'
import { getCollection, render, type CollectionEntry } from 'astro:content'
import ArrowLink, { DIRECTION } from '../../components/ArrowLink.astro'
import BaseLayout from '../../layouts/BaseLayout.astro'
import { READABLE_FORMAT, blogCompareFn, getImageURL } from '../../lib/utils'
import '../../styles/shikiThemesDynamicVariables.css'

export const getStaticPaths = async () =>
  (await getCollection('blog')).map((entry) => ({
    params: { id: entry.id },
    props: { entry },
  }))

const entry = Astro.props.entry as CollectionEntry<'blog'>
const { Content, remarkPluginFrontmatter } = await render(entry)
const { title, publishedAt, keywords } = entry.data
const { readingTime } = remarkPluginFrontmatter

const posts = (await getCollection('blog')).sort(blogCompareFn)
const entryIdx = posts.findIndex((e) => e.id == entry.id)
const prevPost = posts[entryIdx + 1]
const nextPost = posts[entryIdx - 1]

// Set dynamic image path
const { src, alt } = entry.data.image
const remoteImgURL = await getImageURL(src)
const resultingImage = await getImage({ src: remoteImgURL, width: 1600, height: 800 })
// Update frontmatter
const frontmatter = { ...entry.data, image: { src: resultingImage.src, alt } }
---

<script is:inline>
  const DEFAULT_THEME = 'moonlight-ii'
  const themes = [
    'material-theme-lighter',
    'min-light',
    'solarized-light',
    'andromeeda',
    'dark-plus',
    'material-theme-ocean',
    'material-theme-palenight',
    'moonlight-ii',
    'my-eyes-please',
    'one-dark-pro',
    'red',
    'synthwave-84',
  ]

  window.addEventListener('DOMContentLoaded', (event) => {
    const page = document.querySelector(`.${DEFAULT_THEME}`)
    let timeoutID
    window.addEventListener('keydown', (event) => {
      if (timeoutID) return
      if (event.code != 'KeyT') return

      page.className = themes.filter((x) => x != page.className)[Math.floor(Math.random() * (themes.length - 1))]

      timeoutID = setTimeout(() => (timeoutID = null), 320) // forbid calling again during the delay
    })

    for (const codeElem of document.querySelectorAll('code[data-line-counter]')) {
      // direct manipulation of style property allowed by CSP
      codeElem.style.counterSet = `line ${codeElem.getAttribute('data-line-counter')}`
    }
  })
</script>

<BaseLayout frontmatter={frontmatter} type="article">
  <article class="moonlight-ii">
    <h1>{title}</h1>
    <div class="article-time">
      <time datetime={publishedAt.toISOString().slice(0, 10)}>{READABLE_FORMAT.format(publishedAt)}</time>, {
        readingTime
      }
    </div>
    <div class="tags">
      {keywords.map((s: string) => <span class="tag-article">{s}</span>)}
    </div>
    <Content />
    <div class="arrow-links">
      {prevPost && <ArrowLink title={prevPost.data.title} direction={DIRECTION.LEFT} link={`/blog/${prevPost.id}`} />}
      {nextPost && <ArrowLink title={nextPost.data.title} direction={DIRECTION.RIGHT} link={`/blog/${nextPost.id}`} />}
    </div>
  </article>
</BaseLayout>
